generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
	id            Int       @id      @default(autoincrement())
	email         String?   @unique
	name          String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("user")
}

model Store {
	id          Int     @id   @default(autoincrement())
	phone       String? // cntct_tel
	gugun       String? // gugun_nm
	address     String? // addr1
  lat         Float?  // lat
  lng         Float?  // lng
  name        String? // main_title
  category    String? // bizcnd_code_nm
  menu        String? // rprsntv_menu
  description String? // itemcntnts

  @@map("store")
}

model Account {
  id                            String  @id @default(cuid())
  userId                        Int  @map("user_id")
  type                          String
  provider                      String
  providerAccountId             String  @map("provider_account_id")
  refresh_token                 String? @db.Text
  refresh_token_expires_in      Int?
  access_token                  String? @db.Text
  expires_at                    Int?
  token_type                    String?
  scope                         String?
  id_token                      String? @db.Text
  session_state                 String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       Int   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}